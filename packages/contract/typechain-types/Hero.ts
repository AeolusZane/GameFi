/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface HeroInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createHero"
      | "generateRamdom"
      | "getDex"
      | "getHealth"
      | "getHeroes"
      | "getIntellect"
      | "getMagic"
      | "getStrength"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createHero",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateRamdom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHealth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getHeroes", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getIntellect",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMagic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrength",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "createHero", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateRamdom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getHealth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getHeroes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIntellect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMagic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStrength",
    data: BytesLike
  ): Result;
}

export interface Hero extends BaseContract {
  connect(runner?: ContractRunner | null): Hero;
  waitForDeployment(): Promise<this>;

  interface: HeroInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createHero: TypedContractMethod<[_class: BigNumberish], [void], "payable">;

  generateRamdom: TypedContractMethod<[], [bigint], "view">;

  getDex: TypedContractMethod<[hero: BigNumberish], [bigint], "view">;

  getHealth: TypedContractMethod<[hero: BigNumberish], [bigint], "view">;

  getHeroes: TypedContractMethod<[], [bigint[]], "view">;

  getIntellect: TypedContractMethod<[hero: BigNumberish], [bigint], "view">;

  getMagic: TypedContractMethod<[hero: BigNumberish], [bigint], "view">;

  getStrength: TypedContractMethod<[hero: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createHero"
  ): TypedContractMethod<[_class: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "generateRamdom"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDex"
  ): TypedContractMethod<[hero: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHealth"
  ): TypedContractMethod<[hero: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHeroes"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getIntellect"
  ): TypedContractMethod<[hero: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMagic"
  ): TypedContractMethod<[hero: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStrength"
  ): TypedContractMethod<[hero: BigNumberish], [bigint], "view">;

  filters: {};
}
